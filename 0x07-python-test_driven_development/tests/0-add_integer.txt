==================
usage of 0-add_integer.py
==================

Testing the module ``0-add_integer(a, b)`` the addition of two int the arguments must be an integer or a float

	>>> add_integer = __import__('0-add_integer").add_integer

Use case
===========

Add 2 numbers that are either int or float

	>>>add_integer(2, 3)
	5

	>>>add_integer(2.0, 3.0)
	5

	>>>add_integer(2.3, 3.2)
	5.5

Add float that returns an integer

	>>>add_integer(6.7, 0.5)
	7

The return type is int

	>>>type(add_ineger(3)) is int
	true


Invalid arguments
=================
Raises TypeError if any of its arguments are not int or float

::

	>>>add_integer("Ken", 3)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>>add_integer(3, "Ebube")
	Traceback (most recent call last):
	TypeError: b must be an integer

	>>add_integer("Ken", "Ebube")
	Traceback (most recent call last):
	TypeError: both param must be an integer

	>>>add_integer(False, 4)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>>add_integer(4, False)
	Traceback (most recent call last):
	TypeError: b must be an integer

	>>add_integer(False, False)
	Traceback (most recent call last):
	TypeError: both param must be an integer

	>>add_integer(None)
	Traceback (most recent call last):
	TypeError: both param must be an integer
